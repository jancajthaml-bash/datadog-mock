version: 2

jobs:
  test:
    docker:
      - image: circleci/golang:1.13
        environment:
          - LANG: C.UTF-8
          - CGO_ENABLED: 0
          - GO111MODULE: "on"
          - GOOS: linux
          - GOARCH: amd64

    working_directory: /opt/project
    steps:
      - checkout
      - run:
          name: Sync dependencies
          command: |
            go get -u golang.org/x/tools/cmd/cover github.com/mattn/goveralls
      - run:
          name: Run tests
          command: |
            cd /opt/project/src/datadog-mock
            : > /opt/project/coverage.txt
            go test -v -cover -race -coverprofile=/opt/project/coverage.txt -covermode=atomic ./...
            goveralls -coverprofile=/opt/project/coverage.txt -service=circle-ci -repotoken=$COVERALLS_TOKEN
      - run:
          name: Build server
          command: |
            cd /opt/project/src/datadog-mock
            go mod verify
            go mod tidy
            go mod vendor
            go build -a -o /opt/project/pkg/datadog_mock
      - persist_to_workspace:
          root: /opt/project
          paths:
            - pkg/datadog_mock

  performance:
    docker:
      - image: samueldebruyn/debian-git
        environment:
          - LANG: C.UTF-8
          - MESSAGE: "deploys.test.myservice:1|c"
          - EACH: ".0001"

    working_directory: /app
    steps:
      - attach_workspace:
          at: /opt/project

      - checkout

      - run:
          name: Start perf tests
          command: |
            cp -r /opt/project/pkg/datadog_mock /app/server

            duration=10

            echo "will stream UDP event to server for $duration seconds"

            spawn_producer() {
              (./dev/event-producer.sh &> /dev/null) & sleep $duration
              kill $! &> /dev/null || :
            }

            spawn_server() {
              (/app/server &> log.txt) & sleep $(( $duration + 2 ))
              kill $! &> /dev/null || :
            }

            calculate_results() {
              lines=$(wc -l log.txt | awk '{print $1}')
              average=$(($lines / $duration))
              echo "throughput $average / sec"
            }

            trap 'exit 0' INT TERM

            for i in $(seq 1 8); do
              spawn_producer &
            done
            spawn_server &&
            calculate_results

  deploy:
    docker:
      - image: docker:17.09.0-ce-git
        environment:
          - LANG: C.UTF-8

    working_directory: /app
    steps:
      - attach_workspace:
          at: /opt/project

      - checkout
      - setup_remote_docker

      - run:
          name: Install Dependencies
          command: |
            apk --no-cache add curl

      - run:
          name: Build application Docker image
          command: |
            cp -r /opt/project/pkg /app/target
            docker build \
              --build-arg VERSION=$(git tag | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$" | sort -t. -k 1,1n -k 2,2n -k 3,3n | tail -1) \
              --build-arg SOURCE=$(git config --get remote.origin.url) \
              -t bundle .

      - deploy:
          name: Push image to DockerHUB
          command: |
            echo ${DOCKER_PASSWORD}| docker login -u ${DOCKER_USER} --password-stdin
            if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
              git pull --tags

              VERSION=$(git tag | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$" | sort -t. -k 1,1n -k 2,2n -k 3,3n | tail -1)

              echo "releasing version ${VERSION} and updating latest"

              docker tag bundle "jancajthaml/datadog_mock:latest"
              docker push "jancajthaml/datadog_mock:latest"

              docker tag bundle "jancajthaml/datadog_mock:${VERSION}"
              docker push "jancajthaml/datadog_mock:${VERSION}"

            else
              parse_git_branch() {
                branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
                if [ -z "$branch" ]; then
                  branch="snapshot.${CIRCLE_SHA1}"
                fi
                echo ${branch##*/}
              }
              VERSION="$(parse_git_branch)"

              echo "releasing snapshot ${VERSION}"

              docker tag bundle "jancajthaml/datadog_mock:${VERSION}"
              docker push "jancajthaml/datadog_mock:${VERSION}"
            fi

      - deploy:
          name: Lazily update docker badge
          command: |
            if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$"; then
              curl -X POST https://hooks.microbadger.com/images/jancajthaml/datadog_mock/${MICROBADGER_TOKEN}
            fi

workflows:
  version: 2
  validate_and_publish:
    jobs:
      - test
      - deploy:
          requires:
            - test
      - performance:
          requires:
            - test
